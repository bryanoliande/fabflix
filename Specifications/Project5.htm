<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      cs122b-2016-spring-project5 – Public
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!--[if IE]><script type="text/javascript">
      if (/^#__msie303:/.test(window.location.hash))
        window.location.replace(window.location.hash.replace(/^#__msie303:/, '#'));
    </script><![endif]-->
        <link rel="search" href="/wiki/public/search" />
        <link rel="help" href="/wiki/public/wiki/TracGuide" />
        <link rel="alternate" href="/wiki/public/wiki/cs122b-2016-spring-project5?format=txt" type="text/x-trac-wiki" title="Plain Text" />
        <link rel="tracwysiwyg.base" href="/wiki/public" />
        <link rel="start" href="/wiki/public/wiki" />
        <link rel="stylesheet" href="/wiki/public/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/common/css/wiki.css" type="text/css" /><link rel="stylesheet" href="/wiki/public/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/wiki/public/chrome/tracwysiwyg/editor.css" />
        <link rel="shortcut icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
        <link rel="icon" href="/wiki/public/chrome/site/favicon.ico" type="image/x-icon" />
    <script type="text/javascript" src="/wiki/public/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/babel.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/messages/en_US.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/trac.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/search.js"></script><script type="text/javascript" src="/wiki/public/chrome/common/js/folding.js"></script><script type="text/javascript" src="/wiki/public/chrome/tracwysiwyg/wysiwyg.js"></script><script type="text/javascript" src="/wiki/public/chrome/tracwysiwyg/wysiwyg-load.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/wiki/public/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $("#content").find("h1,h2,h3,h4,h5,h6").addAnchor(_("Link to this section"));
        $("#content").find(".wikianchor").each(function() {
          $(this).addAnchor(babel.format(_("Link to #%(id)s"), {id: $(this).attr('id')}));
        });
        $(".foldable").enableFolding(true, true);
      });
    </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://www.ics.uci.edu/"><img src="/wiki/public/chrome/site/ics.jpg" alt="ICS Logo" height="67" width="128" /></a>
      </div>
      <form id="search" action="/wiki/public/search" method="get">
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/public/login">Login</a></li><li><a href="/wiki/public/prefs">Preferences</a></li><li class="last"><a href="/wiki/public/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
  </div>
    <div id="main">
      <div id="pagepath" class="noprint">
  <a class="pathentry first" title="View WikiStart" href="/wiki/public/wiki">wiki:</a><a class="pathentry" href="/wiki/public/wiki/cs122b-2016-spring-project5" title="View cs122b-2016-spring-project5">cs122b-2016-spring-project5</a>
</div>
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="first"><a href="/wiki/public/wiki/WikiStart">Start Page</a></li><li><a href="/wiki/public/wiki/TitleIndex">Index</a></li><li class="last"><a href="/wiki/public/wiki/cs122b-2016-spring-project5?action=history">History</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="wiki">
      <div class="wikipage searchable">
        
          
          <div class="trac-modifiedby">
            <span><a href="/wiki/public/wiki/cs122b-2016-spring-project5?action=diff&amp;version=18" title="Version 18 by jamshid">Last modified</a> <a class="timeline" href="/wiki/public/timeline?from=2016-05-24T03%3A02%3A48-07%3A00&amp;precision=second" title="2016-05-24T03:02:48-07:00 in Timeline">12 months</a> ago</span>
            <span class="trac-print">Last modified on 05/24/16 03:02:48</span>
          </div>
          <div id="wikipage"><p>
</p><div class="wiki-toc">
<ol>
  <li>
    <a href="#CS122BProject5:PerformanceTuningandScalingFabflix">CS122B Project 5: Performance Tuning and Scaling Fabflix</a>
  </li>
  <li>
    <a href="#Tasks">Tasks</a>
    <ol>
      <li>
        <a href="#Task1:ConnectionPoolingandPreparedStatements">Task 1: Connection Pooling and Prepared Statements</a>
      </li>
      <li>
        <a href="#Task2:ScalingFabflix">Task 2: Scaling Fabflix</a>
      </li>
      <li>
        <a href="#Task3:MeasuringtheperformanceofFabflixsearchfeature">Task 3: Measuring the performance of Fabflix search feature</a>
        <ol>
          <li>
            <a href="#Task3.1:Preparingthecodebasefortimemeasurement">Task 3.1: Preparing the codebase for time measurement</a>
          </li>
          <li>
            <a href="#Task3.2:PreparingthetestplaninApacheJMeter">Task 3.2: Preparing the test plan in Apache JMeter</a>
          </li>
          <li>
            <a href="#Task3.3:Collectingtheperformanceresults">Task 3.3: Collecting the performance results</a>
          </li>
        </ol>
      </li>
    </ol>
  </li>
  <li>
    <a href="#Preparingthepackageforsubmission">Preparing the package for submission</a>
  </li>
</ol>
</div><p>
</p>
<h1 id="CS122BProject5:PerformanceTuningandScalingFabflix">CS122B Project 5: Performance Tuning and Scaling Fabflix</h1>
<p>
<strong>Due: June 5th, 2016, Sunday, 11:45 pm. Submit on EEE.</strong><br /> Notice that we use 1 day after the official deadline as the submission cut-off time on EEE to allow you to use the 24-hour grace period if you chose so. After that, EEE will no longer accept submissions.
</p>
<h1 id="Tasks">Tasks</h1>
<ol><li>Using Connection Pooling and Prepared Statements in Fabflix search feature
</li><li>Scaling Fabflix with a cluster of MySQL/Tomcat and a frontend load balancer
</li><li>Measuring the performance of Fabflix search feature
</li></ol><hr />
<h2 id="Task1:ConnectionPoolingandPreparedStatements">Task 1: Connection Pooling and Prepared Statements</h2>
<p>
In this task, we will enable Fabflix with Connection Pooling and Prepared Statements.
</p>
<p>
<strong>Step 1:</strong> Make the necessary changes and make sure to use Prepared Statements in all JDBC statements involved in search. You can use this <a class="ext-link" href="http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html"><span class="icon">​</span>tutorial</a> on prepared statements.
</p>
<p>
<strong>Step 2:</strong> Use <a class="ext-link" href="http://archive.oreilly.com/pub/a/onjava/2006/04/19/database-connection-pooling-with-tomcat.html?page=1"><span class="icon">​</span>this tutorial</a> to add Connection Pooling to Fabflix. The following links may be useful too: <a class="ext-link" href="https://www.mulesoft.com/tcat/tomcat-mysql"><span class="icon">​</span>link1</a>, <a class="ext-link" href="https://examples.javacodegeeks.com/enterprise-java/tomcat/tomcat-connection-pool-configuration-example/"><span class="icon">​</span>link2</a>, <a class="ext-link" href="https://people.apache.org/~fhanik/jdbc-pool/jdbc-pool.html"><span class="icon">​</span>link2</a>. You are required to write a report on how to use connection pooling, and make it accessible at <a class="ext-link" href="http://INSTANCE1_PUBLIC_IP:80/fabflix/reports/connection_pooling"><span class="icon">​</span>http://PUBLIC_IP:8080/fabflix/reports/connection_pooling</a>.
</p>
<hr />
<h2 id="Task2:ScalingFabflix">Task 2: Scaling Fabflix</h2>
<p>
<strong>Step 1</strong>: Setup two AWS instances as two backend servers.  We call them the "master instance" and the "slave instance" (in the context of MySQL replication). Learn how to do MySQL replication using these two instances by following this <a href="https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2016-spring-project5-mysql-master-slave">MySQL replication tutorial</a>.
</p>
<p>
<strong>Step 2 (master/slave)</strong>: On each instance, uninstall the old MySQL and re-install it (<a class="ext-link" href="http://askubuntu.com/questions/172514/how-do-i-uninstall-mysql"><span class="icon">​</span>reference</a>):
</p>
<pre class="wiki">shell&gt; sudo apt-get purge mysql-server mysql-client mysql-common mysql-server-core-5.5 mysql-client-core-5.5
shell&gt; sudo rm -rf /etc/mysql /var/lib/mysql
shell&gt; sudo apt-get autoremove
shell&gt; sudo apt-get autoclean
shell&gt; 
shell&gt; sudo apt-get update
shell&gt; sudo apt-get install mysql-server
shell&gt; sudo service mysql restart
</pre><ol><li>Create a database "moviedb". Download the following MySQL dump file <a class="attachment" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/movie-dump.sql" title="Attachment 'movie-dump.sql' in cs122b-2016-spring-project5">movie-dump.sql</a><a class="trac-rawlink" href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/movie-dump.sql" title="Download">​</a>.  Use it to populate the "moviedb" database:
<pre class="wiki">shell&gt; mysql -u root -p moviedb &lt; movie-dump.sql
</pre></li><li>Create a dummy user for two example Tomcat applications:
<pre class="wiki">shell&gt; mysql -u root -p
mysql&gt; CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'testpass';
mysql&gt; GRANT ALL ON *.* TO 'testuser'@'localhost';
</pre></li></ol><p>
<strong>Step 3 (master/slave)</strong>: Setup Tomcat on each master/slave instance by following the <a class="ext-link" href="https://www.digitalocean.com/community/tutorials/how-to-install-apache-tomcat-7-on-ubuntu-14-04-via-apt-get"><span class="icon">​</span>instructions</a>. (You should have done it many times.)
</p>
<p>
<strong>Step 4 (master/slave)</strong>: On each master/slave instance, deploy <a href="https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-2016-spring-project2/TomcatTest.war">TomcatTest.war</a>. Make the URL <a class="ext-link" href="http://PUBLIC_IP:8080/TomcatTest/servlet/TomcatTest"><span class="icon">​</span>http://PUBLIC_IP:8080/TomcatTest/servlet/TomcatTest</a> work.  Make sure to modify the AWS security group setting for these two instances to allow remote access to their 8080 port.
</p>
<p>
<strong>Step 5 (master/slave)</strong>: On each master/slave instance, deploy <a href="https://grape.ics.uci.edu/wiki/public/attachment/wiki/cs122b-2016-spring-project2/Session.war">Session.war</a>. Make the URL <a class="ext-link" href="http://PUBLIC_IP:8080/Session/servlet/ShowSession?myname=Michael"><span class="icon">​</span>http://PUBLIC_IP:8080/Session/servlet/ShowSession?myname=Michael</a> work.
</p>
<p>
<strong>Step 6 (instance 1)</strong>: On the instance that runs the original Fablix instance (called "instance 1"), setup Apache and its proxy by doing the following:
</p>
<ol><li>Install Apache2 and related modules:
<pre class="wiki">instance1-shell&gt; sudo apt-get install apache2
instance1-shell&gt; service apache2 restart
instance1-shell&gt; sudo a2enmod proxy proxy_balancer proxy_http rewrite headers lbmethod_byrequests
</pre></li><li>Configure the Apache2 web server to use its <tt>proxy_balancer</tt> module for sharing (i.e., redirecting) requests to the backend instances. To do it, edit the following configuration file:
<pre class="wiki">instance1-shell&gt; sudo vim /etc/apache2/sites-enabled/000-default.conf
</pre></li></ol><p>
Create a load balancer proxy, whose members are the backend instances.  In particular, define a proxy on top of the file, before the <tt>&lt;VirtualHost *:80&gt;</tt> tag.<br />
</p>
<pre class="wiki">&lt;Proxy "balancer://TomcatTest_balancer"&gt;
    BalancerMember "http://172.2.2.2:8080/TomcatTest/"
    BalancerMember "http://172.3.3.3:8080/TomcatTest/"
&lt;/Proxy&gt;
</pre><p>
Here we assume '172.2.2.2' and '172.3.3.3' are the private IP address of the master and slave instances, respectively.
</p>
<ol><li>Add two new rules in the body of the VirtualHost tag.<br />
<pre class="wiki">ProxyPass /TomcatTest balancer://TomcatTest_balancer
ProxyPassReverse /TomcatTest balancer://TomcatTest_balancer
</pre></li><li>Restart Apache:
<pre class="wiki">instance1-shell&gt; sudo service apache2 restart
</pre></li><li>Modify the security group of the two backend instances to allow instance 1 to access their 8080 port.
</li></ol><p>
These settings will redirect HTTP requests to "instance1_IP/TomcatTest" to one of the two backend instances. To test it, use a browser to point to <a class="ext-link" href="http://instance1_IP/TomcatTest/servlet/TomcatTest"><span class="icon">​</span>http://instance1_IP/TomcatTest/servlet/TomcatTest</a>. Check the Tomcat log of the two backend instances.  One of them should receive that request.  Keep refreshing the page to send multiple requests, and check if the two backends are receiving the requests evenly.
</p>
<p>
<strong>Step 7 (instance 1)</strong>: Configure the proxy on instance 1 to handle sessions properly. Since the current setting will send requests randomly to the backend, it will not pass cookies properly, causing sessions to fail.  We want to make the session persist over several requests of the same client, i.e., to have a  <em>sticky session.</em> To do it, read the <a class="ext-link" href="http://httpd.apache.org/docs/2.2/mod/mod_proxy_balancer.html"><span class="icon">​</span>instructions</a>, especially those under "Examples of a balancer configuration." Here's a sample setting for the <tt> /etc/apache2/sites-enabled/000-default.conf</tt> file for the "Session.war" application:
</p>
<pre class="wiki">Header add Set-Cookie "ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED

&lt;Proxy "balancer://Session_balancer"&gt;
    BalancerMember "http://172.2.2.2:8080/Session" route=1
    BalancerMember "http://173.3.3.3:8080/Session" route=2
ProxySet stickysession=ROUTEID
&lt;/Proxy&gt; 
</pre><p>
Test if it works by pointing to the URL <a class="ext-link" href="http://instance1_IP/Session/servlet/ShowSession?myname=Michael"><span class="icon">​</span>http://instance1_IP/Session/servlet/ShowSession?myname=Michael</a> of instance 1. It should access one of the backend instances only.
</p>
<p>
<strong>Step 8 (instance 1)</strong>: Send write operations to the master instance only. Since eventually we want the master instance to handle write operations, we need to make sure all write requests to instance 1 are redirected to the master only. We can achieve the goal by defining an additional pair of <tt>ProxyPass</tt> and <tt>ProxyPassReverse</tt> in the <tt>VirtualHost</tt> tag using a new URL pattern. In particular, add the following <strong>before</strong> the old "ProxyPass /Session" proxy:
</p>
<pre class="wiki">ProxyPass /Session/write http://172.2.2.2:8080/Session
ProxyPassReverse /Session/write http://173.2.2.2:8080/Session
</pre><p>
Notice that the proxy rules in the Apache configuration file are called sequentially.  That's why we have to define this rule <strong>before</strong> the old "ProxyPass /Session" rule.
</p>
<p>
Reload and restart the Apache2 web server:
</p>
<pre class="wiki">sudo service apache2 force-reload
sudo service apache2 restart
</pre><p>
Test the URL <a class="ext-link" href="http://instance1_IP/Session/write/servlet/ShowSession?myname=Michael"><span class="icon">​</span>http://instance1_IP/Session/write/servlet/ShowSession?myname=Michael</a>. It should be sent to the master instance only.
</p>
<p>
Here's a sample Apache configuration file <a class="attachment" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/000-default.conf" title="Attachment '000-default.conf' in cs122b-2016-spring-project5">000-default.conf</a><a class="trac-rawlink" href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/000-default.conf" title="Download">​</a>.
</p>
<p>
<strong>Step 9 (master/slave):</strong> Make the two backend instances form a master/slave cluster based on the instructions you learned in step 1 about <a href="https://grape.ics.uci.edu/wiki/public/wiki/cs122b-2016-spring-project5-mysql-master-slave">MySQL replication tutorial</a>.
</p>
<p>
<strong>Step 10 (main task)</strong>: Deploy your Fabflix system to the two backend instances. Do MySQL master/slave replication. Configure the original instance properly to enable load balancing, connection pooling, support sessions, and send write requests to the master instance only. Enabling the scaled version with HTTPS is <strong>optional</strong>. Note that you are required to add a section to the connection pooling report (i.e., at <a class="ext-link" href="http://INSTANCE1_PUBLIC_IP:8080/fabflix/reports/connection_pooling"><span class="icon">​</span>http://INSTANCE1_PUBLIC_IP:8080/fabflix/reports/connection_pooling</a>) and explain how to use connection pooling in the case of having two backend servers.
</p>
<p>
The following is the architecture diagram:
</p>
<blockquote>
<p>
<a style="padding:0; border:none" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/load_balancing.png"><img src="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/load_balancing.png" /></a>
</p>
</blockquote>
<hr />
<h2 id="Task3:MeasuringtheperformanceofFabflixsearchfeature">Task 3: Measuring the performance of Fabflix search feature</h2>
<p>
In this part, we will measure the performance of the keyword search feature that you have implemented in the past projects. The measurement results described in subtasks 2.1 and 2.2 must be reported for both the single-instance (i.e., the version that you prepared in Task 1) and the scaled version of Fabflix.<strong> Note: </strong>The URL to the single-instance version should be <a class="ext-link" href="http:///INSTANCE1_PUBLIC_IP:8080/fabflix"><span class="icon">​</span>http:///INSTANCE1_PUBLIC_IP:8080/fabflix</a>, while it should be <a class="ext-link" href="http://INSTANCE1_PUBLIC_IP:80/fabflix"><span class="icon">​</span>http://INSTANCE1_PUBLIC_IP:80/fabflix</a> for the scaled version that you prepared in Task 2.
</p>
<h3 id="Task3.1:Preparingthecodebasefortimemeasurement">Task 3.1: Preparing the codebase for time measurement</h3>
<p>
Here, we are going to prepare for measuring the following two statistical variables: (1) the average time it takes for the <span class="underline">search servlet</span> to run completely for a query (called TS), and (2) the average time spent on the parts that use JDBC, per query (called TJ).
</p>
<p>
Step 1. Use the following sample to insert the necessary time statements for measuring TS and TJ. You are required to measure and <span class="underline">log</span> the value of "search servlet total execution time" and "JDBC execution time" for every request served by the server (i.e., assuming these values are printed in one line per query, if a query workload of 1000 queries is fired to the system, we must have 1000 lines in the log file, each line containing one sample value for calculating TS and TJ).
</p>
<p>
Particularly for TS samples, it is highly recommended to place these log statements in a filter that wraps the search servlet.
</p>
<pre class="wiki">// Time an event in a program to nanosecond precision
long startTime = System.nanoTime();
/////////////////////////////////
/// ** part to be measured ** ///
/////////////////////////////////
long endTime = System.nanoTime();
long elapsedTime = endTime - startTime; // elapsed time in nano seconds. Note: print the values in nano seconds 
</pre><p>
Step 2. Write a script (in any language that you prefer) to process the resulting log file of a query workload and calculate TS and TJ (i.e., by parsing the log statements and taking the average of all the samples).
</p>
<p>
<strong>Submission-related note:</strong> The usage of this script, which is expected to be found at the root of your .war file, must be explained in your readme link.
</p>
<h3 id="Task3.2:PreparingthetestplaninApacheJMeter">Task 3.2: Preparing the test plan in Apache JMeter</h3>
<p>
In this part, you will use <a class="ext-link" href="http://jmeter.apache.org/"><span class="icon">​</span>Apache JMeter</a> to measure the performance of the search feature of the Fabflix website. In particular, you must measure the <strong>average query time</strong> of the search feature using a set of queries based on the movie tiles in this <a class="attachment" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/query_load.txt" title="Attachment 'query_load.txt' in cs122b-2016-spring-project5">file</a><a class="trac-rawlink" href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/query_load.txt" title="Download">​</a>. Assume the page size is 50, and we only want the first page of results.
</p>
<p>
The following figure illustrates the round-trip time of a query from a client to the server then back to client. The <em>query time</em>  of a query (i.e., "Tq") is  the total time starting from when the search request is sent from the client (Ts) until the time when the response has completely received by the client (Te). It includes two major parts: (1) <em>response time</em> (Tr) is the time it takes until the client hears the first bit of the response, and (2) "payload time" (Tp) is the time it takes for the response data to be downloaded by the client completely.
</p>
<p>
<a style="padding:0; border:none" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/query_time.png"><img src="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/query_time.png" /></a>
</p>
<p>
Step 1: Read this <a class="ext-link" href="http://jmeter.apache.org/usermanual/get-started.html"><span class="icon">​</span>reference</a> to get an overview of Jmeter. Read this <a class="ext-link" href="http://jmeter.apache.org/usermanual/build-test-plan.html"><span class="icon">​</span>page</a> to get familiar with JMeter basics.
</p>
<p>
Step 2: Download and install JMeter from this <a class="ext-link" href="http://jmeter.apache.org/download_jmeter.cgi"><span class="icon">​</span>link</a>.
</p>
<p>
Step 3: Use <a class="ext-link" href="http://jmeter.apache.org/usermanual/build-web-test-plan.html"><span class="icon">​</span>this link</a> to make a test plan for the search feature of your website. You will run the Jmeter test from your local development against the remote AWS instance.  The plan must iteratively generate a proper HTTP or HTTPS search request for every movie title in the provided <a class="attachment" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/query_load.txt" title="Attachment 'query_load.txt' in cs122b-2016-spring-project5">query file</a><a class="trac-rawlink" href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/query_load.txt" title="Download">​</a>. Here is a useful <a class="ext-link" href="http://ivetetecedor.com/how-to-use-a-csv-file-with-jmeter/"><span class="icon">​</span>page</a> about how to use a CSV file for Jmeter. Here are other useful tutorials on how to get request parameter values from an external CSV file: <a class="ext-link" href="http://sqa.fyicenter.com/FAQ/Apache-JMeter/_How_do_I_use_external_data_files_to_define_var.html"><span class="icon">​</span>Link 1</a>, <a class="ext-link" href="http://executeautomation.com/blog/csv-data-driven-parameterization-in-jmeter-series-2/"><span class="icon">​</span>Link 2</a>, and <a class="ext-link" href="https://blazemeter.com/jmeter-training/using-dynamic-data-csv-file-jmeter"><span class="icon">​</span>Link 3</a>.
</p>
<h3 id="Task3.3:Collectingtheperformanceresults">Task 3.3: Collecting the performance results</h3>
<p>
Run the tests for all the following settings to collect performance results. For each case, remember to make the necessary changes to the JMeter test plan and/or the codebase.  Use the results to fill out this <a class="attachment" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/jmeter_report.html" title="Attachment 'jmeter_report.html' in cs122b-2016-spring-project5">HTML file</a><a class="trac-rawlink" href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/jmeter_report.html" title="Download">​</a> as your measurement report. For each case, report the requested values in the corresponding columns, and write a short analysis for that case in the last column. This <a class="attachment" href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/graph_results_case1.png" title="Attachment 'graph_results_case1.png' in cs122b-2016-spring-project5">image</a><a class="trac-rawlink" href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/graph_results_case1.png" title="Download">​</a> is an example of what you should report in the second column called "Graph Results Screenshot". Make your report accessible via the link <a class="ext-link" href="http://YOUR_IP:8080/fabflix/reports/jmeter_report.html"><span class="icon">​</span>http://INSTANCE_1_PUBLIC_IP:8080/fabflix/reports/jmeter_report.html</a>.
</p>
<p>
<strong>Notes</strong>:
</p>
<ol><li>In all cases, if not mentioned otherwise, your Fabflix codebase is assumed to use both the Prepared Statements and Connection Pooling optimization techniques.
</li><li>If more than one JMeter thread is to be used, each thread should start a new session in Tomcat (i.e., threads should not share a session-id).
</li></ol><p>
Single-instance cases (i.e., that is accessible via <a class="ext-link" href="http://YOUR_PUBLIC_IP:8080/project4"><span class="icon">​</span>http://INSTANCE1_PUBLIC_IP:8080/fabflix</a>):
</p>
<ol><li>Use HTTP, 1 thread in JMeter.
</li><li>Use HTTP, 10 threads in JMeter.
</li><li>Use HTTPS, 10 threads in JMeter.
</li><li>Use HTTP, without using prepared statements, 10 threads in JMeter.
</li><li>Use HTTP, without using connection pooling, 10 threads in JMeter.
</li></ol><p>
Scaled-version cases (i.e., that is accessible via <a class="ext-link" href="http://YOUR_PUBLIC_IP:8080/project4"><span class="icon">​</span>http://INSTANCE1_PUBLIC_IP:80/fabflix</a>):
</p>
<ol><li>Use HTTP, 1 thread in JMeter.
</li><li>Use HTTP, 10 threads in JMeter.
</li><li>Use HTTP, without using prepared statements, 10 threads in JMeter.
</li><li>Use HTTP, without using connection pooling, 10 threads in JMeter.
</li></ol><hr />
<h1 id="Preparingthepackageforsubmission">Preparing the package for submission</h1>
<ol><li>For all your three AWS servers (i.e., instance 1 and the two backend servers), open SSH/port 22,HTTP/port 8080, and HTTPS/port 8443 to this IP: 128.195.0.0/16.
</li><li>Make sure to add the classta Linux and MySQL users to both the backend servers as well.
</li><li>Add <span class="underline">all related files</span> to your project's root directory (i.e., which is usually <tt>/var/lib/tomcat7/webapps/fabflix/</tt>)
</li><li>Provide necessary instructions for compiling and running your programs to be accessible at <a class="ext-link" href="http://INSTANCE1_PUBLIC_IP:8080/fabflix/reports/readme"><span class="icon">​</span>http://INSTANCE1_PUBLIC_IP:8080/fabflix/reports/readme</a>. <span class="underline">Particularly for this project, include the IPs of the two backend servers in the readme.</span>
</li><li>Make sure that there is no more changes to be made <strong>anywhere</strong> under your project's root directory.<br /><strong>Note:</strong>  You can use another clone of your codebase for working on the next  project. Do not change the content of the fabflix Tomcat application,  until we announce it open again.
</li><li>Submit all the required files (*.class, *.jar, *.jsp, *.html etc)  to run your program as WAR. In addition, include any  source files  (*.java) under WEB-INF/sources.  Read the following   <a class="ext-link" href="http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.wst.webtools.doc.user%2Ftopics%2Ftwcrewar.html"><span class="icon">​</span>page</a>  to get information about how to create a WAR file. Your submission "war" file should be named  "<strong>project5_[groupID].war</strong>".
</li><li>In addition to EEE submission, two live instance of your website should be accessible: (1) the single-instance version using the link <a class="ext-link" href="http://INSTANCE1_PUBLIC_IP:8080/fabflix"><span class="icon">​</span>http://INSTANCE1_PUBLIC_IP:8080/fabflix</a>, and (2) the scaled version using the link <a class="ext-link" href="http://INSTANCE1_PUBLIC_IP:80/fabflix"><span class="icon">​</span>http://INSTANCE1_PUBLIC_IP:80/fabflix</a>.
</li></ol><p>
While  having the AWS running instance is required (i.e., and not having it  leads to a zero), still, if your project does not compile/run, it will  get a very low score.
</p>
<hr />
</div>
        
        
      </div>
      
    <div id="attachments">
        <h3 class="foldable">Attachments</h3>
        <ul>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/graph_results_case1.png" title="View attachment">graph_results_case1.png</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/graph_results_case1.png" class="trac-rawlink" title="Download">​</a>
       (<span title="58334 bytes">57.0 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T15%3A53%3A38-07%3A00&amp;precision=second" title="2016-05-17T15:53:38-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/query_load.txt" title="View attachment">query_load.txt</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/query_load.txt" class="trac-rawlink" title="Download">​</a>
       (<span title="40279 bytes">39.3 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T15%3A53%3A52-07%3A00&amp;precision=second" title="2016-05-17T15:53:52-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/query_time.png" title="View attachment">query_time.png</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/query_time.png" class="trac-rawlink" title="Download">​</a>
       (<span title="12190 bytes">11.9 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T15%3A53%3A59-07%3A00&amp;precision=second" title="2016-05-17T15:53:59-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/000-default.conf" title="View attachment">000-default.conf</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/000-default.conf" class="trac-rawlink" title="Download">​</a>
       (<span title="2279 bytes">2.2 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T16%3A09%3A17-07%3A00&amp;precision=second" title="2016-05-17T16:09:17-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/load_balancing.png" title="View attachment">load_balancing.png</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/load_balancing.png" class="trac-rawlink" title="Download">​</a>
       (<span title="146248 bytes">142.8 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T16%3A09%3A25-07%3A00&amp;precision=second" title="2016-05-17T16:09:25-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/movie-dump.sql" title="View attachment">movie-dump.sql</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/movie-dump.sql" class="trac-rawlink" title="Download">​</a>
       (<span title="3299 bytes">3.2 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T16%3A09%3A32-07%3A00&amp;precision=second" title="2016-05-17T16:09:32-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/Session.war" title="View attachment">Session.war</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/Session.war" class="trac-rawlink" title="Download">​</a>
       (<span title="97434 bytes">95.2 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T16%3A09%3A39-07%3A00&amp;precision=second" title="2016-05-17T16:09:39-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/TomcatTest.war" title="View attachment">TomcatTest.war</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/TomcatTest.war" class="trac-rawlink" title="Download">​</a>
       (<span title="618856 bytes">604.4 KB</span>) -
      added by <em>mahdi</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-17T16%3A09%3A47-07%3A00&amp;precision=second" title="2016-05-17T16:09:47-07:00 in Timeline">13 months</a> ago.
            </li>
            <li>
    <a href="/wiki/public/attachment/wiki/cs122b-2016-spring-project5/jmeter_report.html" title="View attachment">jmeter_report.html</a><a href="/wiki/public/raw-attachment/wiki/cs122b-2016-spring-project5/jmeter_report.html" class="trac-rawlink" title="Download">​</a>
       (<span title="3043 bytes">3.0 KB</span>) -
      added by <em>jamshid</em> <a class="timeline" href="/wiki/public/timeline?from=2016-05-20T14%3A40%3A49-07%3A00&amp;precision=second" title="2016-05-20T14:40:49-07:00 in Timeline">13 months</a> ago.
            </li>
        </ul>
    </div>

    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/wiki/public/wiki/cs122b-2016-spring-project5?format=txt">Plain Text</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/wiki/public/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/wiki/public/about"><strong>Trac 0.12.5</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right">Visit the Trac open source project at<br /><a href="http://trac.edgewall.org/">http://trac.edgewall.org/</a></p>
    </div>
  </body>
</html>